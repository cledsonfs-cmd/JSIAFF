/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFCadDoencas.java
 *
 * Created on 03/06/2010, 14:55:15
 */
package br.gov.rn.emater.Telas.Cadastros;

import br.gov.rn.emater.Classes.Agente;
import br.gov.rn.emater.Classes.Amostra;
import br.gov.rn.emater.Classes.Doenca;
import br.gov.rn.emater.Classes.DoencaAgente;
import br.gov.rn.emater.Classes.DoencaSintoma;
import br.gov.rn.emater.Classes.DoencaTratamento;
import br.gov.rn.emater.Classes.Planta;
import br.gov.rn.emater.Classes.PlantaParte;
import br.gov.rn.emater.Classes.Sintoma;
import br.gov.rn.emater.Classes.Tratamento;
import br.gov.rn.emater.Classes.Usuario;
import br.gov.rn.emater.Controler.AgenteController;
import br.gov.rn.emater.Controler.DoencaController;
import br.gov.rn.emater.Controler.PlantaController;
import br.gov.rn.emater.Controler.SintomaController;
import br.gov.rn.emater.Controler.TratamentoController;
import br.gov.rn.emater.Modelos.AgentesTabela;
import br.gov.rn.emater.Modelos.AmostraTabela;
import br.gov.rn.emater.Modelos.DoencasTabela;
import br.gov.rn.emater.Modelos.SintomaTabela;
import br.gov.rn.emater.Modelos.TratamentoTabela;
import java.awt.Image;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author cledsonfs
 */
public class JFCadDoencas extends javax.swing.JFrame {

    private Usuario usuario;
    private boolean alterar = false;
    private DoencaController controllerDoenca = new DoencaController();
    private Doenca alterarDoenca = null;
    private Image imagem;
    private Icon icone;
    private boolean imagemPadrao = true;
    private AgenteController agenteController = new AgenteController();
    private SintomaController sintomaController = new SintomaController();
    private TratamentoController tratamentoControler = new TratamentoController();
    private PlantaController plantaController = new PlantaController();
    private List<Agente> agentes;
    private List<Sintoma> sintomas;
    private List<Planta> plantas;
    private List<Tratamento> tratamentos;
    private ArrayList<Agente> agentesSelecionados;
    private ArrayList<Sintoma> sintomasSelecionados;
    private ArrayList<Amostra> amostrasSelecionadas;
    private ArrayList<Tratamento> tratamentosSelecionados;
    private String menssagem = "";

    /** Creates new form JFCadDoencas */
    public JFCadDoencas(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        cargaDados();
        cargaDoencas();
        cargaTabelaAgentes();
        cargaTabelaSintomas();
        cargaTabelaTratamentos();
        cargaTabelaAmostras();
        cargaImagemPadrao();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTFPopular = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTFCientifico = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCBPlanta = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jCBParte = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLImagem = new javax.swing.JLabel();
        jCBAgente = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAgentes = new javax.swing.JTable();
        jBAddAgente = new javax.swing.JButton();
        jBRemAgente = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jCBSintomas = new javax.swing.JComboBox();
        jBAddSintoma = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTSintomas = new javax.swing.JTable();
        jBRemSintoma = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLImagemAmostra = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTAmostras = new javax.swing.JTable();
        jBAddAmostra = new javax.swing.JButton();
        jBRemAmostra = new javax.swing.JButton();
        jBColarAmostra = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jCBTratamentos = new javax.swing.JComboBox();
        jBAddTratamento = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTTratamentos = new javax.swing.JTable();
        jBRemovTratamento = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTDoencas = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jBCancAlter = new javax.swing.JButton();
        jBImprimir = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(".:JSIAFF:Cadastro de Doenças:.");

        jLabel2.setText("Nome popular:");

        jTFPopular.setEnabled(false);
        jTFPopular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFPopularActionPerformed(evt);
            }
        });
        jTFPopular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFPopularKeyReleased(evt);
            }
        });

        jLabel3.setText("Nome científico:");

        jTFCientifico.setEnabled(false);

        jLabel4.setText("Planta:");

        jCBPlanta.setEnabled(false);
        jCBPlanta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPlantaActionPerformed(evt);
            }
        });

        jLabel5.setText("Parte:");

        jCBParte.setEnabled(false);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imagem", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLImagem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLImagem.setToolTipText("Click 2 vezes para ampliar");
        jLImagem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLImagemMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLImagem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLImagem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jCBAgente.setFont(new java.awt.Font("Arial", 0, 10));
        jCBAgente.setEnabled(false);
        jCBAgente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBAgenteItemStateChanged(evt);
            }
        });
        jCBAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAgenteActionPerformed(evt);
            }
        });

        jTAgentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTAgentes);

        jBAddAgente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/forward_nav.gif"))); // NOI18N
        jBAddAgente.setToolTipText("Adicionar agente");
        jBAddAgente.setEnabled(false);
        jBAddAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddAgenteActionPerformed(evt);
            }
        });

        jBRemAgente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/backward_nav.gif"))); // NOI18N
        jBRemAgente.setToolTipText("Remover agente");
        jBRemAgente.setEnabled(false);
        jBRemAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRemAgenteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jCBAgente, 0, 319, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 84, Short.MAX_VALUE)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jBAddAgente)
                            .add(jBRemAgente))
                        .add(31, 31, 31)))
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 424, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jCBAgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(jBAddAgente)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jBRemAgente)))
                .addContainerGap())
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Agentes causadores", jPanel2);

        jCBSintomas.setEnabled(false);

        jBAddSintoma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/forward_nav.gif"))); // NOI18N
        jBAddSintoma.setToolTipText("Adicionar sintoma");
        jBAddSintoma.setEnabled(false);
        jBAddSintoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddSintomaActionPerformed(evt);
            }
        });

        jTSintomas.setFont(new java.awt.Font("Arial", 0, 10));
        jTSintomas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTSintomas);

        jBRemSintoma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/backward_nav.gif"))); // NOI18N
        jBRemSintoma.setToolTipText("Remover sintoma");
        jBRemSintoma.setEnabled(false);
        jBRemSintoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRemSintomaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCBSintomas, 0, 722, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jBAddSintoma)
                            .add(jBRemSintoma))
                        .add(18, 18, 18)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jCBSintomas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jBAddSintoma, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jBRemSintoma, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sintomas", jPanel3);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imagem", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLImagemAmostra.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLImagemAmostra.setToolTipText("Click 2 vezes para ampliar");
        jLImagemAmostra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLImagemAmostraMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLImagemAmostra, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLImagemAmostra, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jTAmostras.setFont(new java.awt.Font("Arial", 0, 10));
        jTAmostras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTAmostras);

        jBAddAmostra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/forward_nav.gif"))); // NOI18N
        jBAddAmostra.setToolTipText("Adicionar amostra");
        jBAddAmostra.setEnabled(false);
        jBAddAmostra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddAmostraActionPerformed(evt);
            }
        });

        jBRemAmostra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/backward_nav.gif"))); // NOI18N
        jBRemAmostra.setToolTipText("Remover amostra");
        jBRemAmostra.setEnabled(false);
        jBRemAmostra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRemAmostraActionPerformed(evt);
            }
        });

        jBColarAmostra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/paste_edit.gif"))); // NOI18N
        jBColarAmostra.setToolTipText("Colar imagem");
        jBColarAmostra.setEnabled(false);
        jBColarAmostra.setFocusable(false);
        jBColarAmostra.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBColarAmostra.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBColarAmostra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBColarAmostraActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jBColarAmostra, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jBAddAmostra)
                            .add(jBRemAmostra))))
                .addContainerGap(532, Short.MAX_VALUE))
            .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(289, Short.MAX_VALUE)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(16, 16, 16)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jBColarAmostra, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(58, 58, 58)
                        .add(jBAddAmostra)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jBRemAmostra)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Amostras", jPanel4);

        jCBTratamentos.setEnabled(false);

        jBAddTratamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/forward_nav.gif"))); // NOI18N
        jBAddTratamento.setToolTipText("Adicionar tratamento");
        jBAddTratamento.setEnabled(false);
        jBAddTratamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddTratamentoActionPerformed(evt);
            }
        });

        jTTratamentos.setFont(new java.awt.Font("Arial", 0, 10));
        jTTratamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTTratamentos);

        jBRemovTratamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/backward_nav.gif"))); // NOI18N
        jBRemovTratamento.setToolTipText("Remover tratamento");
        jBRemovTratamento.setEnabled(false);
        jBRemovTratamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRemovTratamentoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCBTratamentos, 0, 722, Short.MAX_VALUE)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jBAddTratamento)
                            .add(jBRemovTratamento))
                        .add(18, 18, 18)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jCBTratamentos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jBAddTratamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jBRemovTratamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tratamentos", jPanel5);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jTFCientifico)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jTFPopular, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel4)
                                .add(155, 155, 155)
                                .add(jLabel5)
                                .add(139, 139, 139))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(jCBPlanta, 0, 279, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jCBParte, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 174, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel4)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTFPopular, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCBPlanta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCBParte, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTFCientifico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 244, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 128));
        jLabel1.setText("Cadastro de Doenças");

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                    .add(jLabel1))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jLabel1)
                .add(1, 1, 1)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE))
        );

        jTDoencas.setFont(new java.awt.Font("Arial", 0, 12));
        jTDoencas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTDoencas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTDoencasMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTDoencas);

        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/add_obj.gif"))); // NOI18N
        jButton1.setToolTipText("Novo");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/delete_obj.gif"))); // NOI18N
        jButton2.setToolTipText("Excluir");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/change_obj.gif"))); // NOI18N
        jButton3.setToolTipText("Alterar");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jBCancAlter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/refresh_nav.gif"))); // NOI18N
        jBCancAlter.setToolTipText("Cancelar Alteração");
        jBCancAlter.setFocusable(false);
        jBCancAlter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBCancAlter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBCancAlter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancAlterActionPerformed(evt);
            }
        });
        jToolBar1.add(jBCancAlter);

        jBImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/print_edit.gif"))); // NOI18N
        jBImprimir.setEnabled(false);
        jBImprimir.setFocusable(false);
        jBImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBImprimir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jBImprimir);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/save_edit.gif"))); // NOI18N
        jButton4.setToolTipText("Salvar");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/close_view.gif"))); // NOI18N
        jButton5.setToolTipText("Fechar");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
                    .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void jTFPopularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFPopularActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTFPopularActionPerformed

    private void jTFPopularKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFPopularKeyReleased
        if (evt.getKeyCode() == 10) {
            jTFCientifico.requestFocus();
        }
}//GEN-LAST:event_jTFPopularKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTFPopular.setText("");
        jTFPopular.setEnabled(true);
        jTFCientifico.setText("");
        jTFCientifico.setEnabled(true);
        jTFPopular.requestFocus();

        jCBPlanta.setEnabled(true);
        jCBParte.setEnabled(true);

        jCBAgente.setEnabled(true);
        jBAddAgente.setEnabled(true);
        jBRemAgente.setEnabled(true);

        jCBSintomas.setEnabled(true);
        jBAddSintoma.setEnabled(true);
        jBRemSintoma.setEnabled(true);

        jBAddAmostra.setEnabled(true);
        jBRemAmostra.setEnabled(true);
        jBColarAmostra.setEnabled(true);

        jCBTratamentos.setEnabled(true);
        jBAddTratamento.setEnabled(true);
        jBRemovTratamento.setEnabled(true);
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jTDoencas.getSelectedRow() > -1) {
            int id = (Integer) jTDoencas.getValueAt(jTDoencas.getSelectedRow(), 0);
            Doenca d = controllerDoenca.localizarPorID(id);

            int opc = JOptionPane.showConfirmDialog(this, "Confirma a exclusão do registro?", ".:JSIAFF:Pergunta:.", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (opc == 0) {
                controllerDoenca.set(d);
                try {
                    boolean retorno = controllerDoenca.excluir();
                    menssagem = controllerDoenca.getMenssagemRetorno();
                    if (retorno) {
                        JOptionPane.showMessageDialog(this, menssagem, ".:JSIAFF:Error:.", JOptionPane.INFORMATION_MESSAGE);
                        limpaTela();
                        cargaDoencas();
                        cargaTabelaAgentes();
                        cargaTabelaAmostras();
                        cargaTabelaSintomas();
                        cargaTabelaTratamentos();
                        cargaImagemPadrao();
                    } else {
                        JOptionPane.showMessageDialog(this, menssagem, ".:JSIAFF:Error:.", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(JFCadDoencas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        alterar = true;
        jTFPopular.setEnabled(true);
        jTFCientifico.setEnabled(true);

        jCBPlanta.setEnabled(true);
        jCBParte.setEnabled(true);

        jCBAgente.setEnabled(true);
        jBAddAgente.setEnabled(true);
        jBRemAgente.setEnabled(true);

        jCBSintomas.setEnabled(true);
        jBAddSintoma.setEnabled(true);
        jBRemSintoma.setEnabled(true);

        jBAddAmostra.setEnabled(true);
        jBRemAmostra.setEnabled(true);
        jBColarAmostra.setEnabled(true);

        jCBTratamentos.setEnabled(true);
        jBAddTratamento.setEnabled(true);
        jBRemovTratamento.setEnabled(true);
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Doenca doenca;
        if (alterar && alterarDoenca != null) {
            doenca = alterarDoenca;
        } else {
            doenca = new Doenca();
        }

        doenca.setDescricao(jTFPopular.getText().trim().toUpperCase());
        doenca.setNomecientifico(jTFCientifico.getText().trim().toUpperCase());
        doenca.setDatacadastro(new Timestamp(new Date().getTime()));
        doenca.setIdUsuario(usuario.getIdUsuario());

        Planta plantaSel = null;
        for (Planta p : plantas) {
            if (jCBPlanta.getSelectedItem().toString().trim().equals(p.getNomepopular().trim())) {
                plantaSel = p;
            }
        }

        if (plantaSel != null) {
            for (PlantaParte pp : plantaSel.getPlantaParte()) {
                if (jCBParte.getSelectedItem().toString().trim().equals(pp.getParte().getDescricao().trim())) {
                    doenca.setIdPlantaParte(pp.getIdPlantaParte());
                }
            }
        }

        List<DoencaAgente> doencaAgentes = new ArrayList<DoencaAgente>();
        for (Agente a : agentesSelecionados) {
            DoencaAgente da = new DoencaAgente();
            da.setIdAgente(a.getIdagente());
            doencaAgentes.add(da);
        }
        doenca.setDoencaAgentes(doencaAgentes);

        List<DoencaSintoma> doencaSintomas = new ArrayList<DoencaSintoma>();
        for (Sintoma s : sintomasSelecionados) {
            DoencaSintoma ds = new DoencaSintoma();
            ds.setIdSintoma(s.getIdsintoma());
            doencaSintomas.add(ds);
        }
        doenca.setDoencaSintomas(doencaSintomas);

        List<DoencaTratamento> doencaTratamentos = new ArrayList<DoencaTratamento>();
        for (Tratamento t : tratamentosSelecionados) {
            DoencaTratamento dt = new DoencaTratamento();
            dt.setIdTratamento(t.getIdtratamento());
            doencaTratamentos.add(dt);
        }
        doenca.setDoencaTratamentos(doencaTratamentos);

        doenca.setAmostras(amostrasSelecionadas);

        controllerDoenca.set(doenca);

        try {
            boolean retorno = controllerDoenca.salvar(alterar);
            menssagem = controllerDoenca.getMenssagemRetorno();
            if (retorno) {
                JOptionPane.showMessageDialog(this, menssagem, ".:JSIAFF:Mensagem:.", JOptionPane.INFORMATION_MESSAGE);
                limpaTela();
                cargaDoencas();
                cargaTabelaAgentes();
                cargaTabelaAmostras();
                cargaTabelaSintomas();
                cargaTabelaTratamentos();
                cargaImagemPadrao();
            } else {
                JOptionPane.showMessageDialog(this, menssagem, ".:JSIAFF:Error:.", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(JFCadUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jButton4ActionPerformed

    private void limpaTela() {
        jTFCientifico.setText("");
        jTFPopular.setText("");
        jCBPlanta.setSelectedIndex(0);
        jCBAgente.setSelectedIndex(0);
        jCBSintomas.setSelectedIndex(0);
        jCBTratamentos.setSelectedIndex(0);

        jCBPlanta.setEnabled(false);
        jCBParte.setEnabled(false);

        jCBAgente.setEnabled(false);
        jBAddAgente.setEnabled(false);
        jBRemAgente.setEnabled(false);

        jCBSintomas.setEnabled(false);
        jBAddSintoma.setEnabled(false);
        jBRemSintoma.setEnabled(false);

        jBAddAmostra.setEnabled(false);
        jBRemAmostra.setEnabled(false);
        jBColarAmostra.setEnabled(false);

        jCBTratamentos.setEnabled(false);
        jBAddTratamento.setEnabled(false);
        jBRemovTratamento.setEnabled(false);

        alterar = false;

        jTFCientifico.setEnabled(false);
        jTFPopular.setEnabled(false);

        agentesSelecionados = null;
        amostrasSelecionadas = null;
        tratamentosSelecionados = null;
        sintomasSelecionados = null;
        menssagem = "";
    }

    private void cargaDados() {
        try {
            agentes = agenteController.getTodos();
            sintomas = sintomaController.getTodos();
            tratamentos = tratamentoControler.getTodos();
            plantas = plantaController.getTodos();
        } catch (Exception ex) {
            Logger.getLogger(JFCadDoencas.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultComboBoxModel dlm = new DefaultComboBoxModel();
        for (Agente agente : agentes) {
            dlm.addElement(agente.getNomecientifico().trim());
        }
        jCBAgente.setModel(dlm);
        jCBAgente.setSelectedIndex(0);

        DefaultComboBoxModel dlm1 = new DefaultComboBoxModel();
        for (Sintoma sintoma : sintomas) {
            dlm1.addElement(sintoma.getDescricao().trim());
        }
        jCBSintomas.setModel(dlm1);

        DefaultComboBoxModel dlm2 = new DefaultComboBoxModel();
        for (Tratamento tratamento : tratamentos) {
            dlm2.addElement(tratamento.getDescricao().trim());
        }
        jCBTratamentos.setModel(dlm2);

        DefaultComboBoxModel dlm3 = new DefaultComboBoxModel();
        dlm3.addElement("------");
        for (Planta planta : plantas) {
            dlm3.addElement(planta.getNomepopular().trim());
        }
        jCBPlanta.setModel(dlm3);
    }

    private void jLImagemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLImagemMouseClicked
}//GEN-LAST:event_jLImagemMouseClicked

    private void jCBAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAgenteActionPerformed
        Agente at = agentes.get(jCBAgente.getSelectedIndex());
        Icon icone = at.getImagem();
        jLImagem.setText(null);
        jLImagem.setIcon(new ImageIcon(((ImageIcon) icone).getImage().getScaledInstance(100, -1, 100)));
    }//GEN-LAST:event_jCBAgenteActionPerformed

    private void jCBAgenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBAgenteItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBAgenteItemStateChanged

    private void jBAddAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddAgenteActionPerformed
        boolean naoExiste = true;
        Agente sel = agentes.get(jCBAgente.getSelectedIndex());
        for (Agente agente : agentesSelecionados) {
            if (sel.getIdagente() == agente.getIdagente()) {
                naoExiste = false;
            }
        }
        if (naoExiste) {
            agentesSelecionados.add(sel);
            cargaTabelaAgentes();
        }
    }//GEN-LAST:event_jBAddAgenteActionPerformed

    private void jBRemAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRemAgenteActionPerformed
        int linhaSel = jTAgentes.getSelectedRow();
        if (linhaSel > -1) {
            int index = 0;
            int cont = 0;
            int idSel = Integer.valueOf(jTAgentes.getModel().getValueAt(linhaSel, 1).toString());
            for (Agente agente : agentesSelecionados) {
                if (idSel == agente.getIdagente()) {
                    index = cont;
                }
                cont++;
            }
            agentesSelecionados.remove(index);
            cargaTabelaAgentes();
        }
    }//GEN-LAST:event_jBRemAgenteActionPerformed

    private void jLImagemAmostraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLImagemAmostraMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLImagemAmostraMouseClicked

    private void jBAddAmostraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddAmostraActionPerformed
        if (imagem != null && !imagemPadrao) {
            Amostra sel = new Amostra();
            sel.setImagem(new ImageIcon(imagem));
            sel.setIdUsuario(usuario.getIdUsuario());
            sel.setDatacadastro(new Timestamp(new Date().getTime()));
            amostrasSelecionadas.add(sel);
            cargaTabelaAmostras();
            imagem = null;
            jLImagemAmostra.setIcon(null);
            cargaImagemPadrao();
        }
    }//GEN-LAST:event_jBAddAmostraActionPerformed

    private void jBRemAmostraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRemAmostraActionPerformed
        int linhaSel = jTAmostras.getSelectedRow();
        if (linhaSel > -1) {
            int index = 0;
            int cont = 0;
            int idSel = Integer.valueOf(jTAmostras.getModel().getValueAt(linhaSel, 1).toString());
            for (Amostra amostra : amostrasSelecionadas) {
                if (idSel == amostra.getIdamostra()) {
                    index = cont;
                }
                cont++;
            }
            amostrasSelecionadas.remove(index);
            cargaTabelaAmostras();
        }
    }//GEN-LAST:event_jBRemAmostraActionPerformed

    private void jBColarAmostraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBColarAmostraActionPerformed
        imagem = null;
        Clipboard colar = getToolkit().getSystemClipboard();
        Transferable clipData = colar.getContents(this);
        if (colar == null) {
            JOptionPane.showMessageDialog(null, "Não há imagem na área de transferencia");
        } else {
            try {
                imagem = (Image) (clipData.getTransferData(DataFlavor.imageFlavor));
            } catch (UnsupportedFlavorException e1) {
                e1.printStackTrace();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            icone = new ImageIcon(imagem);
            jLImagemAmostra.setText(null);
            //jLImagemAmostra.setIcon(new ImageIcon(((ImageIcon) icone).getImage().getScaledInstance(100, -1, 100)));
            jLImagemAmostra.setIcon(icone);
            imagemPadrao = false;
        }
}//GEN-LAST:event_jBColarAmostraActionPerformed

    private void jBAddSintomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddSintomaActionPerformed
        boolean naoExiste = true;
        Sintoma sel = sintomas.get(jCBSintomas.getSelectedIndex());
        for (Sintoma sintoma : sintomasSelecionados) {
            if (sel.getIdsintoma() == sintoma.getIdsintoma()) {
                naoExiste = false;
            }
        }
        if (naoExiste) {
            sintomasSelecionados.add(sel);
            cargaTabelaSintomas();
        }
    }//GEN-LAST:event_jBAddSintomaActionPerformed

    private void jBAddTratamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddTratamentoActionPerformed
        boolean naoExiste = true;
        Tratamento sel = tratamentos.get(jCBTratamentos.getSelectedIndex());
        for (Tratamento tratamento : tratamentosSelecionados) {
            if (sel.getIdtratamento() == tratamento.getIdtratamento()) {
                naoExiste = false;
            }
        }
        if (naoExiste) {
            tratamentosSelecionados.add(sel);
            cargaTabelaTratamentos();
        }
    }//GEN-LAST:event_jBAddTratamentoActionPerformed

    private void jBRemSintomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRemSintomaActionPerformed
        int linhaSel = jTSintomas.getSelectedRow();
        if (linhaSel > -1) {
            int index = 0;
            int cont = 0;
            int idSel = Integer.valueOf(jTSintomas.getModel().getValueAt(linhaSel, 0).toString());
            for (Sintoma sintoma : sintomasSelecionados) {
                if (idSel == sintoma.getIdsintoma()) {
                    index = cont;
                }
                cont++;
            }
            sintomasSelecionados.remove(index);
            cargaTabelaSintomas();
        }
    }//GEN-LAST:event_jBRemSintomaActionPerformed

    private void jBRemovTratamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRemovTratamentoActionPerformed
        int linhaSel = jTTratamentos.getSelectedRow();
        if (linhaSel > -1) {
            int index = 0;
            int cont = 0;
            int idSel = Integer.valueOf(jTTratamentos.getModel().getValueAt(linhaSel, 0).toString());
            for (Tratamento tratamento : tratamentosSelecionados) {
                if (idSel == tratamento.getIdtratamento()) {
                    index = cont;
                }
                cont++;
            }
            tratamentosSelecionados.remove(index);
            cargaTabelaTratamentos();
        }
    }//GEN-LAST:event_jBRemovTratamentoActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
}//GEN-LAST:event_jButton5ActionPerformed

    private void jCBPlantaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPlantaActionPerformed
        DefaultComboBoxModel dlm4 = new DefaultComboBoxModel();
        String v = jCBPlanta.getSelectedItem().toString();
        dlm4.addElement("------");
        for (Planta pl : plantas) {
            if (pl.getNomepopular().trim().equals(v)) {
                for (PlantaParte plantaParte : pl.getPlantaParte()) {
                    dlm4.addElement(plantaParte.getParte().getDescricao().trim());
                }
            }
        }

        jCBParte.setModel(dlm4);
    }//GEN-LAST:event_jCBPlantaActionPerformed

    private void jTDoencasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDoencasMouseClicked
        if (jTDoencas.getSelectedRow() > -1) {
            int id = (Integer) jTDoencas.getValueAt(jTDoencas.getSelectedRow(), 0);
            alterarDoenca = controllerDoenca.localizarPorID(id);
            jTFCientifico.setText(alterarDoenca.getNomecientifico().trim());
            jTFPopular.setText(alterarDoenca.getDescricao().trim());
            jCBPlanta.setSelectedItem(alterarDoenca.getPlantaParte().getPlanta().getNomepopular().trim());
            jCBParte.setSelectedItem(alterarDoenca.getPlantaParte().getParte().getDescricao().trim());

            agentesSelecionados = new ArrayList<Agente>();
            for (DoencaAgente da : alterarDoenca.getDoencaAgentes()) {
                agentesSelecionados.add(da.getAgente());
            }

            amostrasSelecionadas = new ArrayList<Amostra>();
            for (Amostra a : alterarDoenca.getAmostras()) {
                amostrasSelecionadas.add(a);
            }

            tratamentosSelecionados = new ArrayList<Tratamento>();
            for (DoencaTratamento dt : alterarDoenca.getDoencaTratamentos()) {
                tratamentosSelecionados.add(dt.getTratamento());
            }

            sintomasSelecionados = new ArrayList<Sintoma>();
            for (DoencaSintoma ds : alterarDoenca.getDoencaSintomas()) {
                sintomasSelecionados.add(ds.getSintoma());
            }

            cargaTabelaAgentes();
            cargaTabelaAmostras();
            cargaTabelaSintomas();
            cargaTabelaTratamentos();
            cargaImagemPadrao();

        }
    }//GEN-LAST:event_jTDoencasMouseClicked

    private void jBCancAlterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancAlterActionPerformed
        alterar = false;
        jTFPopular.setEnabled(false);
        jTFCientifico.setEnabled(false);

        jCBPlanta.setEnabled(false);
        jCBParte.setEnabled(false);

        jCBAgente.setEnabled(false);
        jBAddAgente.setEnabled(false);
        jBRemAgente.setEnabled(false);

        jCBSintomas.setEnabled(false);
        jBAddSintoma.setEnabled(false);
        jBRemSintoma.setEnabled(false);

        jBAddAmostra.setEnabled(false);
        jBRemAmostra.setEnabled(false);
        jBColarAmostra.setEnabled(false);

        jCBTratamentos.setEnabled(false);
        jBAddTratamento.setEnabled(false);
        jBRemovTratamento.setEnabled(false);
}//GEN-LAST:event_jBCancAlterActionPerformed

    private void cargaDoencas() {
        jTDoencas.setModel(new DoencasTabela());
        TableRowSorter ts = new TableRowSorter(jTDoencas.getModel());
        jTDoencas.setRowSorter(ts);
        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de registros: " + jTDoencas.getModel().getRowCount()));
    }

    private void cargaTabelaAgentes() {
        if (agentesSelecionados == null) {
            agentesSelecionados = new ArrayList<Agente>();
        }
        jTAgentes.setModel(new AgentesTabela(agentesSelecionados, true));
        TableRowSorter ts = new TableRowSorter(jTAgentes.getModel());
        jTAgentes.setRowSorter(ts);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de registros: " + jTAgentes.getModel().getRowCount()));
        jTAgentes.setRowHeight(55);
        jTAgentes.getColumnModel().getColumn(0).setMaxWidth(55);
        jTAgentes.getColumnModel().getColumn(1).setMaxWidth(55);
    }

    private void cargaTabelaSintomas() {
        if (sintomasSelecionados == null) {
            sintomasSelecionados = new ArrayList<Sintoma>();
        }
        jTSintomas.setModel(new SintomaTabela(sintomasSelecionados, true));
        TableRowSorter ts = new TableRowSorter(jTSintomas.getModel());
        jTSintomas.setRowSorter(ts);
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de registros: " + jTSintomas.getModel().getRowCount()));
        jTSintomas.getColumnModel().getColumn(0).setMaxWidth(55);
    }

    private void cargaTabelaTratamentos() {
        if (tratamentosSelecionados == null) {
            tratamentosSelecionados = new ArrayList<Tratamento>();
        }
        jTTratamentos.setModel(new TratamentoTabela(tratamentosSelecionados, true));
        TableRowSorter ts = new TableRowSorter(jTTratamentos.getModel());
        jTTratamentos.setRowSorter(ts);
        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de registros: " + jTTratamentos.getModel().getRowCount()));
        jTTratamentos.getColumnModel().getColumn(0).setMaxWidth(55);
    }

    private void cargaTabelaAmostras() {
        if (amostrasSelecionadas == null) {
            amostrasSelecionadas = new ArrayList<Amostra>();
        }
        jTAmostras.setModel(new AmostraTabela(amostrasSelecionadas, true));
        TableRowSorter ts = new TableRowSorter(jTAmostras.getModel());
        jTAmostras.setRowSorter(ts);
        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de registros: " + jTAmostras.getModel().getRowCount()));
        jTAmostras.setRowHeight(55);
        jTAmostras.getColumnModel().getColumn(0).setMaxWidth(55);
        jTAmostras.getColumnModel().getColumn(1).setMaxWidth(55);
    }

    private void cargaImagemPadrao() {
        imagemPadrao = true;
        imagem = new javax.swing.ImageIcon(getClass().getResource("/br/gov/rn/emater/icones/sem_imagem.gif")).getImage();
        icone = new ImageIcon(imagem);
        jLImagemAmostra.setText(null);
        jLImagemAmostra.setIcon(new ImageIcon(((ImageIcon) icone).getImage().getScaledInstance(100, -1, 100)));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAddAgente;
    private javax.swing.JButton jBAddAmostra;
    private javax.swing.JButton jBAddSintoma;
    private javax.swing.JButton jBAddTratamento;
    private javax.swing.JButton jBCancAlter;
    private javax.swing.JButton jBColarAmostra;
    private javax.swing.JButton jBImprimir;
    private javax.swing.JButton jBRemAgente;
    private javax.swing.JButton jBRemAmostra;
    private javax.swing.JButton jBRemSintoma;
    private javax.swing.JButton jBRemovTratamento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jCBAgente;
    private javax.swing.JComboBox jCBParte;
    private javax.swing.JComboBox jCBPlanta;
    private javax.swing.JComboBox jCBSintomas;
    private javax.swing.JComboBox jCBTratamentos;
    private javax.swing.JLabel jLImagem;
    private javax.swing.JLabel jLImagemAmostra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTAgentes;
    private javax.swing.JTable jTAmostras;
    private javax.swing.JTable jTDoencas;
    private javax.swing.JTextField jTFCientifico;
    private javax.swing.JTextField jTFPopular;
    private javax.swing.JTable jTSintomas;
    private javax.swing.JTable jTTratamentos;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
