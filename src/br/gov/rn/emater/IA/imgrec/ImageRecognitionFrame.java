package br.gov.rn.emater.IA.imgrec;

import br.gov.rn.emater.Classes.Amostra;
import br.gov.rn.emater.Classes.Planta;
import br.gov.rn.emater.Classes.Reconhecimento;
import br.gov.rn.emater.Controler.AmostraController;
import br.gov.rn.emater.Controler.PlantaController;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.neuroph.contrib.imgrec.ColorMode;
import org.neuroph.contrib.imgrec.FractionRgbData;
import org.neuroph.contrib.imgrec.ImageRecognitionHelper;
import org.neuroph.contrib.imgrec.ImageRecognitionPlugin;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.learning.TrainingElement;
import org.neuroph.core.learning.TrainingSet;
import br.gov.rn.emater.IA.NeuronsApplicationView;
import br.gov.rn.emater.IA.dialog.ComboItem;
import org.neuroph.util.TransferFunctionType;
import org.neuroph.util.VectorParser;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import br.gov.rn.emater.IA.ProjectManager;
import br.gov.rn.emater.Modelos.ReconhecimentoTabela;
import java.awt.Component;
import java.awt.Image;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.table.TableRowSorter;
import org.apache.commons.collections15.map.FastTreeMap;

/**
 * This class is GUI for image recognition
 * Alterado por cledsonfs
 * @author Jon Tait
 * @author Zoran Sevarac <sevarac@gmail.com>
 *
 */
public class ImageRecognitionFrame extends javax.swing.JInternalFrame {

    int imageWidth = 50;
    int imageHeight = 50;
    String networkLabel;
    String trainingSetLabel;
    Vector<Integer> hiddenLayersNeuronsCount;
    TransferFunctionType transferFunctionType;
    double learningRate;
    double momentum;
    String imageDir;
    String junkDir = "/Users/cledsonfs/test_images/junk";
    Dimension samplingResolution;
    ColorMode colorMode;
    // image data
    Map<String, FractionRgbData> rgbDataMap;
    List<String> imageLabels;
    NeuralNetwork activeNeuralNetwork;
    TrainingSet activeTrainingSet;
    NeuronsApplicationView mainFrame;
    boolean imageDataLoaded = false;
    JFileChooser imageDirFileChooser;
    JFileChooser junkDirFileChooser;// = new JFileChooser();
    JFileChooser testImageFileChooser;// = new JFileChooser();
    List<Amostra> amostras = null;
    AmostraController amostraController;
    List<Planta> plantas = null;
    PlantaController plantaController;

    /** Creates new form ImageRecognitionFrame */
    public ImageRecognitionFrame() {
        initComponents();
        fillTransferFunctionCombo();
        amostraController = new AmostraController();
        colorRadioButton.setActionCommand("FullColor");
        bwRadioButton.setActionCommand("BlackAndWhite");
        this.mainFrame = NeuronsApplicationView.getInstance();
        jTable1.setModel(new ReconhecimentoTabela(null));
        plantaController = new PlantaController();
        jTabbedPane1.setSelectedIndex(0);
        carregarPlantas();
    }

    private void carregarPlantas() {
        plantas = plantaController.getTodosOrdenadoPorNomeCientifico();
        for (Planta p : plantas) {
            jCBPlantas.addItem(p.getNomepopular().trim());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorModeButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        imageTrainingSetPanel = new javax.swing.JPanel();
        chooseImagesPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLNumImgDB = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jCBPlantas = new javax.swing.JComboBox();
        jLImagem = new javax.swing.JLabel();
        samplingResolutionPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        imageWidthField = new javax.swing.JTextField();
        imageHeightField = new javax.swing.JTextField();
        trainingSetPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        trainingSetLabelField = new javax.swing.JTextField();
        buttonPanel1 = new javax.swing.JPanel();
        nextButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        colorModePanel = new javax.swing.JPanel();
        colorRadioButton = new javax.swing.JRadioButton();
        bwRadioButton = new javax.swing.JRadioButton();
        networkPanel = new javax.swing.JPanel();
        networkSettingsPanel = new javax.swing.JPanel();
        layerNeuronCounts = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        transferFunctionCombo = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        networkLabelField = new javax.swing.JTextField();
        createNetworkButton = new javax.swing.JButton();
        testPanel = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        testImageLabel = new javax.swing.JLabel();
        selectImageButton = new javax.swing.JButton();
        testAllButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        testResultsTextArea = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ImageRecognitionFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(860, 500));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jTabbedPane1.setDoubleBuffered(true);
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        imageTrainingSetPanel.setName("imageTrainingSetPanel"); // NOI18N

        chooseImagesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("chooseImagesPanel.border.title"))); // NOI18N
        chooseImagesPanel.setName("chooseImagesPanel"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLNumImgDB.setText(resourceMap.getString("jLNumImgDB.text")); // NOI18N
        jLNumImgDB.setName("jLNumImgDB"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jCBPlantas.setName("jCBPlantas"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLNumImgDB, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBPlantas, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCBPlantas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLNumImgDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jLImagem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLImagem.setText(resourceMap.getString("jLImagem.text")); // NOI18N
        jLImagem.setName("jLImagem"); // NOI18N

        javax.swing.GroupLayout chooseImagesPanelLayout = new javax.swing.GroupLayout(chooseImagesPanel);
        chooseImagesPanel.setLayout(chooseImagesPanelLayout);
        chooseImagesPanelLayout.setHorizontalGroup(
            chooseImagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseImagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
        );
        chooseImagesPanelLayout.setVerticalGroup(
            chooseImagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseImagesPanelLayout.createSequentialGroup()
                .addComponent(jLImagem, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(chooseImagesPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        samplingResolutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("samplingResolutionPanel.border.title"))); // NOI18N
        samplingResolutionPanel.setName("samplingResolutionPanel"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        imageWidthField.setText(resourceMap.getString("imageWidthField.text")); // NOI18N
        imageWidthField.setName("imageWidthField"); // NOI18N

        imageHeightField.setText(resourceMap.getString("imageHeightField.text")); // NOI18N
        imageHeightField.setName("imageHeightField"); // NOI18N

        javax.swing.GroupLayout samplingResolutionPanelLayout = new javax.swing.GroupLayout(samplingResolutionPanel);
        samplingResolutionPanel.setLayout(samplingResolutionPanelLayout);
        samplingResolutionPanelLayout.setHorizontalGroup(
            samplingResolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(samplingResolutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(samplingResolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(25, 25, 25)
                .addGroup(samplingResolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageHeightField)
                    .addComponent(imageWidthField, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        samplingResolutionPanelLayout.setVerticalGroup(
            samplingResolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(samplingResolutionPanelLayout.createSequentialGroup()
                .addGroup(samplingResolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(samplingResolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap())
        );

        trainingSetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("trainingSetPanel.border.title"))); // NOI18N
        trainingSetPanel.setName("trainingSetPanel"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        trainingSetLabelField.setText(resourceMap.getString("trainingSetLabelField.text")); // NOI18N
        trainingSetLabelField.setName("trainingSetLabelField"); // NOI18N

        javax.swing.GroupLayout trainingSetPanelLayout = new javax.swing.GroupLayout(trainingSetPanel);
        trainingSetPanel.setLayout(trainingSetPanelLayout);
        trainingSetPanelLayout.setHorizontalGroup(
            trainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainingSetPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addContainerGap(216, Short.MAX_VALUE))
            .addComponent(trainingSetLabelField, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );
        trainingSetPanelLayout.setVerticalGroup(
            trainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainingSetPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainingSetLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPanel1.setName("buttonPanel1"); // NOI18N

        nextButton.setText(resourceMap.getString("nextButton.text")); // NOI18N
        nextButton.setEnabled(false);
        nextButton.setName("nextButton"); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        resetButton.setText(resourceMap.getString("resetButton.text")); // NOI18N
        resetButton.setName("resetButton"); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanel1Layout = new javax.swing.GroupLayout(buttonPanel1);
        buttonPanel1.setLayout(buttonPanel1Layout);
        buttonPanel1Layout.setHorizontalGroup(
            buttonPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanel1Layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetButton)
                .addGap(145, 145, 145))
        );
        buttonPanel1Layout.setVerticalGroup(
            buttonPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(buttonPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(nextButton)
                    .addComponent(resetButton))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        colorModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("colorModePanel.border.title"))); // NOI18N
        colorModePanel.setName("colorModePanel"); // NOI18N

        colorModeButtonGroup.add(colorRadioButton);
        colorRadioButton.setSelected(true);
        colorRadioButton.setText(resourceMap.getString("colorRadioButton.text")); // NOI18N
        colorRadioButton.setName("colorRadioButton"); // NOI18N

        colorModeButtonGroup.add(bwRadioButton);
        bwRadioButton.setText(resourceMap.getString("bwRadioButton.text")); // NOI18N
        bwRadioButton.setEnabled(false);
        bwRadioButton.setName("bwRadioButton"); // NOI18N

        javax.swing.GroupLayout colorModePanelLayout = new javax.swing.GroupLayout(colorModePanel);
        colorModePanel.setLayout(colorModePanelLayout);
        colorModePanelLayout.setHorizontalGroup(
            colorModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorModePanelLayout.createSequentialGroup()
                .addGroup(colorModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorRadioButton)
                    .addComponent(bwRadioButton))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        colorModePanelLayout.setVerticalGroup(
            colorModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(bwRadioButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout imageTrainingSetPanelLayout = new javax.swing.GroupLayout(imageTrainingSetPanel);
        imageTrainingSetPanel.setLayout(imageTrainingSetPanelLayout);
        imageTrainingSetPanelLayout.setHorizontalGroup(
            imageTrainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageTrainingSetPanelLayout.createSequentialGroup()
                .addGroup(imageTrainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(chooseImagesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, imageTrainingSetPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(imageTrainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(imageTrainingSetPanelLayout.createSequentialGroup()
                                .addComponent(samplingResolutionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trainingSetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colorModePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        imageTrainingSetPanelLayout.setVerticalGroup(
            imageTrainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageTrainingSetPanelLayout.createSequentialGroup()
                .addComponent(chooseImagesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imageTrainingSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(samplingResolutionPanel, 0, 134, Short.MAX_VALUE)
                    .addComponent(colorModePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trainingSetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab(resourceMap.getString("imageTrainingSetPanel.TabConstraints.tabTitle"), imageTrainingSetPanel); // NOI18N

        networkPanel.setName("networkPanel"); // NOI18N

        networkSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("networkSettingsPanel.border.title"))); // NOI18N
        networkSettingsPanel.setName("networkSettingsPanel"); // NOI18N

        layerNeuronCounts.setText(resourceMap.getString("layerNeuronCounts.text")); // NOI18N
        layerNeuronCounts.setName("layerNeuronCounts"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        transferFunctionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sigmoid" }));
        transferFunctionCombo.setName("transferFunctionCombo"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        networkLabelField.setText(resourceMap.getString("networkLabelField.text")); // NOI18N
        networkLabelField.setName("networkLabelField"); // NOI18N

        javax.swing.GroupLayout networkSettingsPanelLayout = new javax.swing.GroupLayout(networkSettingsPanel);
        networkSettingsPanel.setLayout(networkSettingsPanelLayout);
        networkSettingsPanelLayout.setHorizontalGroup(
            networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkSettingsPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transferFunctionCombo, 0, 384, Short.MAX_VALUE)
                    .addComponent(networkLabelField, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addComponent(layerNeuronCounts, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
                .addContainerGap())
        );
        networkSettingsPanelLayout.setVerticalGroup(
            networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkSettingsPanelLayout.createSequentialGroup()
                .addGroup(networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(networkLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(transferFunctionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(layerNeuronCounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        createNetworkButton.setText(resourceMap.getString("createNetworkButton.text")); // NOI18N
        createNetworkButton.setName("createNetworkButton"); // NOI18N
        createNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNetworkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout networkPanelLayout = new javax.swing.GroupLayout(networkPanel);
        networkPanel.setLayout(networkPanelLayout);
        networkPanelLayout.setHorizontalGroup(
            networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkPanelLayout.createSequentialGroup()
                .addGroup(networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(networkSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(networkPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createNetworkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        networkPanelLayout.setVerticalGroup(
            networkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkPanelLayout.createSequentialGroup()
                .addComponent(networkSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNetworkButton)
                .addGap(196, 196, 196))
        );

        jTabbedPane1.addTab(resourceMap.getString("networkPanel.TabConstraints.tabTitle"), networkPanel); // NOI18N

        testPanel.setEnabled(false);
        testPanel.setName("testPanel"); // NOI18N

        imagePanel.setName("imagePanel"); // NOI18N
        imagePanel.setPreferredSize(new java.awt.Dimension(128, 128));

        testImageLabel.setBackground(resourceMap.getColor("testImageLabel.background")); // NOI18N
        testImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        testImageLabel.setText(resourceMap.getString("testImageLabel.text")); // NOI18N
        testImageLabel.setName("testImageLabel"); // NOI18N
        testImageLabel.setPreferredSize(new java.awt.Dimension(64, 64));

        selectImageButton.setText(resourceMap.getString("selectImageButton.text")); // NOI18N
        selectImageButton.setName("selectImageButton"); // NOI18N
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });

        testAllButton.setText(resourceMap.getString("testAllButton.text")); // NOI18N
        testAllButton.setName("testAllButton"); // NOI18N
        testAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAllButtonActionPerformed(evt);
            }
        });

        clearButton.setText(resourceMap.getString("clearButton.text")); // NOI18N
        clearButton.setName("clearButton"); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jComboBox1.setFont(resourceMap.getFont("jComboBox1.font")); // NOI18N
        jComboBox1.setMinimumSize(new java.awt.Dimension(51, 80));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setBounds(new java.awt.Rectangle(0, 0, 97, 29));
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(testImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(testAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addComponent(testImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(2, 2, 2)
                .addComponent(selectImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testAllButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap())
        );

        jTabbedPane2.setName("jTabbedPane2"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane2.addTab(resourceMap.getString("jScrollPane2.TabConstraints.tabTitle"), jScrollPane2); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        testResultsTextArea.setColumns(20);
        testResultsTextArea.setRows(5);
        testResultsTextArea.setName("testResultsTextArea"); // NOI18N
        jScrollPane1.setViewportView(testResultsTextArea);

        jTabbedPane2.addTab(resourceMap.getString("jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        javax.swing.GroupLayout testPanelLayout = new javax.swing.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                .addContainerGap())
        );
        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(resourceMap.getString("testPanel.TabConstraints.tabTitle"), testPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(resourceMap.getString("jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        nextButton();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resetImageSettings();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void createNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNetworkButtonActionPerformed
        createNewNetwork();
    }//GEN-LAST:event_createNetworkButtonActionPerformed

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        testImage();
    }//GEN-LAST:event_selectImageButtonActionPerformed

    private void testAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAllButtonActionPerformed
        testWholeDataSet();
    }//GEN-LAST:event_testAllButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearTestArea();
        jTable1.setModel(new ReconhecimentoTabela(null));
    }//GEN-LAST:event_clearButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    }//GEN-LAST:event_formMouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cargaImagens();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        applyImageSettings();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        testImage2();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void cargaImagens() {
        new Thread() {

            public void run() {
                try {
                    Planta planta = plantas.get(jCBPlantas.getSelectedIndex());
                    amostras = amostraController.getTodosPorIdPlanta(String.valueOf(planta.getIdplanta()));
                    int cont = 0;
                    jLImagem.setText("");
                    ImageIcon img = null;
                    dcbm = new DefaultComboBoxModel();
                    ImageIcon[] imgs = new ImageIcon[amostras.size()];
                    int n = 0;
                    for (Amostra amostra : amostras) {
                        cont++;
                        img = amostra.getImagem(85);
                        //jLImagem.setIcon(new ImageIcon(img.getImage().getScaledInstance(50, -1, 100)));
                        jLImagem.setIcon(img);
                        jLNumImgDB.setText("Imagens DB: " + cont);
                        jComboBox1.addItem(amostra.getImagem(50));
                        //dcbm.addElement(amostra.getImagem(50));
                        imgs[n] = img;
                        n++;
                        try {
                            sleep(10);
                        } catch (Exception e) {
                        }
                    }
                    //jComboBox1 = new JComboBox(imgs);
                    ComboBoxRenderer renderer = new ComboBoxRenderer();
                    renderer.setPreferredSize(new Dimension(50, 65));
                    jComboBox1.setRenderer(renderer);
                    jComboBox1.setMaximumRowCount(3);
                    //jComboBox1.setSize(100, 100);


                    trainingSetLabelField.setText("(" + jCBPlantas.getSelectedItem().toString().toUpperCase().trim() + ")" + new SimpleDateFormat("dd-MM-yyyy_hh:mm:ss").format(new Date().getTime()) + "_data");
                } catch (Exception ex) {
                    Logger.getLogger(ImageRecognitionFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();

    }

    class ComboBoxRenderer extends JLabel implements ListCellRenderer {

        public ComboBoxRenderer() {
            setOpaque(true);
            setHorizontalAlignment(CENTER);
            setVerticalAlignment(CENTER);
        }

        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            ImageIcon icon = (ImageIcon) value;
            setText(icon.getDescription());
            setIcon(icon);
            return this;
        }
    }

    // carrega onome da imagem e o esquema rgb-data
    private void loadImagedata() {
        rgbDataMap = new HashMap<String, FractionRgbData>();
        imageLabels = new ArrayList<String>();

        try {
            rgbDataMap.putAll(ImagesLoader.getFractionRgbDataForDb(amostras, samplingResolution, imageWidth));
            for (String imgName : rgbDataMap.keySet()) {
                StringTokenizer st = new StringTokenizer(imgName, "._");
                String imageLabel = st.nextToken();
                if (!imageLabels.contains(imageLabel)) {
                    imageLabels.add(imageLabel);
                }
            }
            Collections.sort(imageLabels);
        } catch (IOException ioe) {
            System.err.println("Unable to load images from labeled images dir: '" + imageDir + "'");
            System.err.println(ioe.toString());
        }

        if ((junkDir != null) && (!junkDir.equals(""))) {
            try {
                File junkImagesDir = new File(junkDir);
                rgbDataMap.putAll(ImagesLoader.getFractionRgbDataForDirectory(junkImagesDir, samplingResolution));
            } catch (IOException ioe) {
                System.err.println("Unable to load images from junk images dir: '" + junkDir + "'");
                System.err.println(ioe.toString());
            }
        }

        onImageDataLoad();
    }

    public void createNewNetwork() {
        networkLabel = networkLabelField.getText().trim();

        if (networkLabel.equals("")) {
            JOptionPane.showConfirmDialog(null,
                    "Entrada Inválida! Nome da rede deve ser fornecido.",
                    ".:JSIAFF:Error:.", JOptionPane.DEFAULT_OPTION);
            return;
        }

        transferFunctionType = TransferFunctionType.valueOf(((ComboItem) transferFunctionCombo.getSelectedItem()).getValue().toString());

        String hiddenLayersStr = layerNeuronCounts.getText().trim();
        if (hiddenLayersStr.equals("")) {
            JOptionPane.showConfirmDialog(null,
                    "Entrada Inválida! Número de neurônio da camada oculta inválido.",
                    ".:JSIAFF:Error:.", JOptionPane.DEFAULT_OPTION);
            return;
        }

        try {
            hiddenLayersNeuronsCount = VectorParser.parseInteger(hiddenLayersStr);
        } catch (Exception ex) {
            JOptionPane.showConfirmDialog(null,
                    "Entrada Inválida! O número de neurônios da camada oculta com inteiros separados por espaço.",
                    ".:JSIAFF:Error:.", JOptionPane.DEFAULT_OPTION);
            return;
        }

        // create neural network
        activeNeuralNetwork = ImageRecognitionHelper.createNewNeuralNetwork(networkLabel, samplingResolution, colorMode, imageLabels, hiddenLayersNeuronsCount, transferFunctionType);

        ProjectManager.getInstance().addNewNetworkToProject(activeNeuralNetwork);
    }

    private void fillTransferFunctionCombo() {
        transferFunctionCombo.removeAllItems();
        transferFunctionCombo.addItem(new ComboItem("Sigmoid", TransferFunctionType.SIGMOID.toString()));
        //transferFunctionCombo.addItem(new ComboItem("Tanh", TransferFunctionType.TANH.toString()));
    }

    private void onImageDataLoad() {
        imageDataLoaded = true;
        createNetworkButton.setEnabled(true);
        nextButton.setEnabled(true);

        int neurons = 0;
        if (imageLabels.size() < 12) {
            neurons = 12;
        } else {
            neurons = imageLabels.size();
        }

        layerNeuronCounts.setText(Integer.toString(neurons));
        networkLabelField.setText(trainingSetLabel);
    }

    public void applyImageSettings() {
        if (amostras.size() == 0) {
            JOptionPane.showConfirmDialog(null,
                    "Numero de amostras invalido",
                    ".:JSIAFF:Error:.", JOptionPane.DEFAULT_OPTION);
            return;
        }

        try {
            imageWidth = Integer.parseInt(imageWidthField.getText().trim());
            imageHeight = Integer.parseInt(imageHeightField.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showConfirmDialog(null,
                    "Entrada Inválida! A largura e a altura da de finida na amostragem devem ser valores inteiros.",
                    ".:JSIAFF:Error:.", JOptionPane.DEFAULT_OPTION);
            return;
        }


        trainingSetLabel = trainingSetLabelField.getText().trim();
        if (trainingSetLabel.equals("")) {
            JOptionPane.showConfirmDialog(null,
                    "Entrada Inválida! O nome da rede deve ser fornecido.",
                    ".:JSIAFF:Error:.", JOptionPane.DEFAULT_OPTION);
            return;
        }

        String selectedColorMode = colorModeButtonGroup.getSelection().getActionCommand();
        if (selectedColorMode.equalsIgnoreCase("FullColor")) {
            colorMode = ColorMode.FULL_COLOR;
        } else {
            colorMode = ColorMode.BLACK_AND_WHITE;
        }

        samplingResolution = new Dimension(imageWidth, imageHeight);

        loadImagedata();

        if (colorMode == ColorMode.FULL_COLOR) {
            activeTrainingSet = ImageRecognitionHelper.createTrainingSet(imageLabels, rgbDataMap);
        } else {
            activeTrainingSet = ImageRecognitionHelper.createBlackAndWhiteTrainingSet(imageLabels, rgbDataMap);
        }

        activeTrainingSet.setLabel(trainingSetLabel);

        ProjectManager.getInstance().updateTrainingSets(activeTrainingSet);
    }

    public void resetImageSettings() {
        imageDir = "";
        junkDir = "";
        imageWidth = 8;
        imageHeight = 8;
        imageWidthField.setText("8");
        imageHeightField.setText("8");
        trainingSetLabel = "";
        trainingSetLabelField.setText("");
        networkLabelField.setText("");
        colorMode = null;

        imageDataLoaded = false;
        createNetworkButton.setEnabled(false);
        nextButton.setEnabled(false);
        colorModeButtonGroup.setSelected(colorRadioButton.getModel(), true);

    }

    public void testWholeDataSet() {
        jTabbedPane2.setSelectedIndex(1);
        testResultsTextArea.setText("");
        Iterator<TrainingElement> iterator = activeTrainingSet.iterator();
        while (iterator.hasNext()) {
            TrainingElement trainingElement = iterator.next();
            activeNeuralNetwork.setInput(trainingElement.getInput());
            activeNeuralNetwork.calculate();
            Vector networkOutput = activeNeuralNetwork.getOutput();
            testResultsTextArea.append(networkOutput.toString() + "\r\n");
        }

    }

    public void nextButton() {
        jTabbedPane1.setSelectedIndex(1);
    }

    public void testImage() {
        jTabbedPane2.setSelectedIndex(0);
        try {
            BufferedImage img = amostraController.ImageIconBufferedImage(amostras.get(jComboBox1.getSelectedIndex()).getImagem());
            ImageIcon im = new ImageIcon(img);
            im = new ImageIcon(im.getImage().getScaledInstance(50, -1, 100));
            img = amostraController.ImageIconBufferedImage(im);

            testImageLabel.setIcon(im);

            ImageRecognitionPlugin imageRecognition = (ImageRecognitionPlugin) activeNeuralNetwork.getPlugin(ImageRecognitionPlugin.IMG_REC_PLUGIN_NAME);
            HashMap<String, Double> output = imageRecognition.recognizeImage(img);

            NumberFormat numberFormat = DecimalFormat.getNumberInstance();
            numberFormat.setMaximumFractionDigits(4);
            Iterator keys = output.keySet().iterator();
            List<Reconhecimento> reconhecimentos = new ArrayList<Reconhecimento>();
            Amostra amostra;
            Reconhecimento reconhecimento;
            TreeMap<Double, Reconhecimento> valores = new FastTreeMap<Double, Reconhecimento>();
            while (keys.hasNext()) {
                String key = (String) keys.next();
                amostra = amostraController.find(key.trim());
                reconhecimento = new Reconhecimento();
                reconhecimento.setAmostra(amostra);
                reconhecimento.setIndiceReconhecimento(numberFormat.format(output.get(key)));
                valores.put(output.get(key), reconhecimento);
            }

            reconhecimentos.addAll(valores.values());
            List<Reconhecimento> ordenado = new ArrayList<Reconhecimento>();
            for (int i = reconhecimentos.size() - 1; i >= 0; i--) {
                ordenado.add(reconhecimentos.get(i));
            }
            ReconhecimentoTabela rT = new ReconhecimentoTabela(ordenado);
            jTable1.setModel(rT);
            TableRowSorter ts = new TableRowSorter(jTable1.getModel());
            jTable1.setRowSorter(ts);
            jTable1.setRowHeight(55);
        } catch (Exception ex) {
            Logger.getLogger(ImageRecognitionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void testImage2() {
        try {
            Image imagem = null;
            Clipboard colar = getToolkit().getSystemClipboard();
            Transferable clipData = colar.getContents(this);
            if (colar == null) {
                JOptionPane.showMessageDialog(null, "Não há imagem na área de transferencia");
            } else {
                imagem = (Image) (clipData.getTransferData(DataFlavor.imageFlavor));
            }
            ImageIcon ic = new ImageIcon(imagem);
            BufferedImage img = amostraController.ImageIconBufferedImage(ic);
            ImageIcon im = new ImageIcon(img);
            im = new ImageIcon(im.getImage().getScaledInstance(50, -1, 100));
            img = amostraController.ImageIconBufferedImage(im);

            testImageLabel.setIcon(im);

            ImageRecognitionPlugin imageRecognition = (ImageRecognitionPlugin) activeNeuralNetwork.getPlugin(ImageRecognitionPlugin.IMG_REC_PLUGIN_NAME);
            HashMap<String, Double> output = imageRecognition.recognizeImage(img);

            NumberFormat numberFormat = DecimalFormat.getNumberInstance();
            numberFormat.setMaximumFractionDigits(4);
            Iterator keys = output.keySet().iterator();
            List<Reconhecimento> reconhecimentos = new ArrayList<Reconhecimento>();
            Amostra amostra;
            Reconhecimento reconhecimento;
            TreeMap<Double, Reconhecimento> valores = new FastTreeMap<Double, Reconhecimento>();
            while (keys.hasNext()) {
                String key = (String) keys.next();
                amostra = amostraController.find(key.trim());
                reconhecimento = new Reconhecimento();
                reconhecimento.setAmostra(amostra);
                reconhecimento.setIndiceReconhecimento(numberFormat.format(output.get(key)));
                valores.put(output.get(key), reconhecimento);
            }

            reconhecimentos.addAll(valores.values());
            List<Reconhecimento> ordenado = new ArrayList<Reconhecimento>();
            for (int i = reconhecimentos.size() - 1; i >= 0; i--) {
                ordenado.add(reconhecimentos.get(i));
            }
            ReconhecimentoTabela rT = new ReconhecimentoTabela(ordenado);
            jTable1.setModel(rT);
            TableRowSorter ts = new TableRowSorter(jTable1.getModel());
            jTable1.setRowSorter(ts);
            jTable1.setRowHeight(55);
        } catch (Exception ex) {
            Logger.getLogger(ImageRecognitionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // }
    }

    public void clearTestArea() {
        testResultsTextArea.setText("");
    }
    private DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel1;
    private javax.swing.JRadioButton bwRadioButton;
    private javax.swing.JPanel chooseImagesPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.ButtonGroup colorModeButtonGroup;
    private javax.swing.JPanel colorModePanel;
    private javax.swing.JRadioButton colorRadioButton;
    private javax.swing.JButton createNetworkButton;
    private javax.swing.JTextField imageHeightField;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JPanel imageTrainingSetPanel;
    private javax.swing.JTextField imageWidthField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jCBPlantas;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLImagem;
    private javax.swing.JLabel jLNumImgDB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField layerNeuronCounts;
    private javax.swing.JTextField networkLabelField;
    private javax.swing.JPanel networkPanel;
    private javax.swing.JPanel networkSettingsPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel samplingResolutionPanel;
    private javax.swing.JButton selectImageButton;
    private javax.swing.JButton testAllButton;
    private javax.swing.JLabel testImageLabel;
    private javax.swing.JPanel testPanel;
    private javax.swing.JTextArea testResultsTextArea;
    private javax.swing.JTextField trainingSetLabelField;
    private javax.swing.JPanel trainingSetPanel;
    private javax.swing.JComboBox transferFunctionCombo;
    // End of variables declaration//GEN-END:variables
}
